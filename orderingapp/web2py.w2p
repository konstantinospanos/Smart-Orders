# -*- coding: utf-8 -*-
from encryption import encrypt_pass
from sendemail import evidencemail
from sendpassword import semail
from bson import ObjectId
from bson import json_util
from datetime import timedelta
from datetime import date
import os, random, string
import datetime
import uuid
import json

def login():
    if request.args[0]=='e54d9fc1-df90-466b-856e-84b075bb296d-02f6d436-ba00-4601-a374-aae35a562213':
        import bcrypt
        if request.vars.has_key('username') and request.vars.has_key('password'):
            username = request.vars.username
            password = request.vars.password
            user = db.user.find_one({"username":username})
            if user and user['password'] == bcrypt.hashpw(str(password), str(user['password'])):
                user[u'_id'] = str(user[u'_id'])
                customer = db.customers.find_one({"_id":ObjectId(user[u'customer_id'])})
                customer[u'_id'] = str(customer[u'_id'])
                return response.json(dict(userdict = user, customerdict = customer,resp='Successful connection'))
            else:
                return response.json(dict(resp = 'Incorrect Connection'))

def vieworder():
    order_list = []
    user = db.user.find_one({'api_key':request.args[0]})
    if user:
        user[u'_id'] = str(user[u'_id'])
        if request.vars.has_key('table'):
            table = request.vars.table
            check_order = db.order.find_one({"$and":[{'table': table},{'customer_id':str(user[u'customer_id'])},{"status": 'new'}]})#check table
            if check_order:# check table if there is order in table request table,customerid,status:new
                check_order['_id'] = str(check_order['_id'])
                for order in db.order.find({"$and":[{'table':table},{'customer_id':str(user[u'customer_id'])},{'status':'new'}]}):
                    order_list.append({'items':order['items'],'_id':str(order[u'_id']),'saved':order['saved']})
                return response.json(dict(resp = 'η παραγγελία μου',allorderstable=order_list))
            else:
                return response.json(dict(nonorder = 'Create order'))

def vieworders_user():
    orders_user =[]
    user = db.user.find_one({'api_key':request.args[0]})
    if user:
        user_id = str(user[u'_id'])
        for item in db.order.aggregate([{'$match':{'$and':[{'status':'new'},{"user_id":user_id},{u'customer_id':str(user[u'customer_id'])}]}},
                                     {'$group':{'_id':'$table','total':{"$sum":"$total"}}}]):
            orders_user.append({'table':u'ΤΡΑΠΕΖΙ'+ item['_id'],'total':item['total']})
        if orders_user:
            return response.json(dict(ordersuser = orders_user,myorders = 'My orders'))
        else:
            return response.json(dict(nonorder = 'Dont orders'))

def data():
    user = db.user.find_one({'api_key':request.args[1]})
    if user:
        user_id = str(user[u'_id'])
        if request.args[0]=='insertorder':
            if request.vars.has_key('order_data'):
                order_data = request.vars.order_data
                table = request.vars.table
                data = json.loads(request.vars.get('order_data'),object_hook=json_util.object_hook)
                order_id = db.order.insert(data)
                data[u'_id'] = str(order_id)
                order_data_find = db.order.find_one({'_id':ObjectId(data[u'_id'])})
                order_data_find['_id']= str(order_data_find['_id'])
                return response.json(dict(save='Save orders',getorder=order_data_find))
        if request.args[0]=='updateorder':
            order_list = []
            if request.vars.has_key('_id'):
                _id = request.vars._id
                order = json.loads(request.vars.get('order_data'))# object_hook=json_util.object_hook)
                uporder = db.order.find_and_modify(query={'_id':ObjectId(request.vars._id)},
                          #update={"$set": {'items':order['items']}}, upsert=False)
                          update={"$set": {'total':order['total'],'items':order['items']}}, upsert=False)
                uporder[u'_id'] = str(uporder[u'_id'])
                for order in db.order.find({"$and":[{'table':request.vars.table},{'customer_id':str(user[u'customer_id'])},{'status':'new'}]}):
                    order_list.append({'items':order['items'],'_id':str(order[u'_id']),'saved':order['saved']})
                return response.json(dict(up='update orders',getorder=order_list))

        if request.args[0]=='deleteorder':
            if request.vars.has_key('order_id'):
                table = request.vars.table
                db.order.delete_one({'_id':ObjectId(request.vars.order_id)})
                orderstable_list = []
                for order in db.order.find({"$and":[{'table':table},{'customer_id':str(user[u'customer_id'])},{'status':'new'}]}):
                    orderstable_list.append({'items':order['items'],u'_id':str(order[u'_id']),'saved':order['saved']})
                return response.json(dict(resp='delet orders',orderstablelist = orderstable_list))

        if request.args[0]=='backmanagement':      #check if exists order in table,find order,table,customer_id,status new
            if request.vars.has_key('table'):
                table = request.vars.table
                check_orders = db.order.find_one({"$and":[{'table': table},{'customer_id':str(user[u'customer_id'])},{"status": 'new'}]})
                if check_orders:
                    check_orders['_id'] = str(check_orders['_id'])
                    orderstable_list = []
                    for order in db.order.find({"$and":[{'table':table},{'customer_id':str(user[u'customer_id'])},{'status':'new'}]}):
                        orderstable_list.append({'items':order['items'],u'_id':str(order[u'_id']),'saved':order['saved']})
                    return response.json(dict(resp='οι παραγγελίες μου',orderstablelist = orderstable_list))
                else:
                    return response.json(dict(respno = 'Dont orders'))

def details():
    allorderstable_list = []
    user = db.user.find_one({'api_key':request.args[0]})
    if user:
        user_id = str(user[u'_id'])
        if request.vars.has_key('table'):
            table = request.vars.table
            check_order = db.order.find_one({"$and":[{'table': table},{'customer_id':str(user[u'customer_id'])},{"status": 'new'}]})
            if check_order:# true view order table,request table,customer_id,status new
                check_order['_id'] = str(check_order['_id'])
                for order in db.order.find({"$and":[{'table':table},{'customer_id':str(user[u'customer_id'])},{'status':'new'}]}):
                    allorderstable_list.append({'items':order['items'],u'_id':str(order[u'_id']),'saved':order['saved']})
                return response.json(dict(resp = 'υπαρχει παραγγελια',allorderstable=allorderstable_list))

def total():
    if request.vars.has_key('table'):
        table = request.vars.table
        for item in db.order.aggregate([{"$match":{'$and':[{'table':table},{'status':'new'}]}},
                                        {"$group":{'_id':"$cust_id",'total':{"$sum":"$total"}}}]):
            total_order = item['total']

    return response.json(dict(totalorder=total_order))

def pay():
    if request.vars.has_key('order_id'):
        db.order.update({'_id':ObjectId(request.vars.order_id)},{'$set': {'status':'pay'}})
        return response.json(dict(resp = 'Orders Pay'))

def payall():
    user = db.user.find_one({'api_key':request.args[0]})
    if user:
        user_id = str(user[u'_id'])
        if request.vars.has_key('table'):
            table = request.vars.table
            for order in db.order.find_one({"$and":[{'table': table},{'customer_id':str(user[u'customer_id'])},{"status": 'new'}]}):
                db.order.update({"$and":[{'table': table},{'customer_id':str(user[u'customer_id'])},{"status": 'new'}]},{'$set': {'status':'pay'}})
            return response.json(dict(resp = 'All orders pay'))
